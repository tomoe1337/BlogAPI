openapi: 3.0.0
info:
  title: Blog API
  version: 1.0.0
  description: API для управления блогом с постами, категориями и тегами

servers:
  - url: http://localhost:8000/api
    description: Локальный сервер разработки

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Для авторизации используйте JWT токен, полученный при входе в систему.
        Токен должен быть передан в заголовке Authorization в формате:
        Authorization: Bearer <token>

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: ID пользователя
        name:
          type: string
          description: Имя пользователя
        email:
          type: string
          format: email
          description: Email пользователя
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          description: Дата подтверждения email

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email пользователя
        password:
          type: string
          format: password
          description: Пароль пользователя

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 255
          description: Имя пользователя
        email:
          type: string
          format: email
          maxLength: 255
          description: Email пользователя
        password:
          type: string
          minLength: 8
          format: password
          description: Пароль пользователя

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT токен для аутентификации
        token_type:
          type: string
          enum: [bearer]
          description: Тип токена
        expires_in:
          type: integer
          description: Время жизни токена в секундах

    Post:
      type: object
      properties:
        id:
          type: integer
          description: ID поста
        title:
          type: string
          description: Заголовок поста
        content:
          type: string
          description: Содержимое поста
        image:
          type: string
          nullable: true
          description: URL изображения поста
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    Category:
      type: object
      properties:
        id:
          type: integer
          description: ID категории
        title:
          type: string
          description: Название категории

    Tag:
      type: object
      properties:
        id:
          type: integer
          description: ID тега
        title:
          type: string
          description: Название тега

    PostCreate:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
        image:
          type: string
          nullable: true
        category:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string

    PostUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
        image:
          type: string
          nullable: true
        category:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string

paths:
  /auth/login:
    post:
      summary: Аутентификация пользователя
      description: Получение JWT токена для аутентификации
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized

  /auth/registration:
    post:
      summary: Регистрация нового пользователя
      description: Создание нового пользователя и получение JWT токена
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object

  /posts:
    get:
      summary: Получить список постов
      description: Возвращает список постов с пагинацией
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      per_page:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

    post:
      summary: Создать новый пост
      description: Создает новый пост с указанными данными
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '200':
          description: Пост успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

  /posts/{post}:
    parameters:
      - name: post
        in: path
        required: true
        schema:
          type: integer
        description: ID поста

    get:
      summary: Получить пост по ID
      description: Возвращает информацию о посте по его ID
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

    patch:
      summary: Обновить пост
      description: Обновляет информацию о посте
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Пост успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

    delete:
      summary: Удалить пост
      description: Удаляет пост по его ID
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Пост успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post deleted successfully
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
